package com.androidsdk.snaphy.snaphyandroidsdk.db;


<%
 /*-------PURE JAVASCRIPT METHODS-------------------*/
 var modelName = model.methods.capitalizeFirstLetter(model.name);
%>


import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.content.ContentValues;
import java.util.HashMap;
import com.google.gson.Gson;
import android.database.Cursor;
import java.lang.reflect.Method;
import android.util.Log;
import java.util.Map;
import com.androidsdk.snaphy.snaphyandroidsdk.list.DataList;

import com.androidsdk.snaphy.snaphyandroidsdk.models.<%- modelName %>;
//Import self repository..
import com.androidsdk.snaphy.snaphyandroidsdk.repository.<%- modelName %>Repository;
import com.strongloop.android.loopback.RestAdapter;

/**
* Created by snaphy on 1/2/2017.
*/

public class <%- modelName %>Db extends DbHandler<<%- modelName %>, <%- modelName %>Repository> {
  public <%- modelName %>Db(Context context, String DATABASE_NAME, RestAdapter restAdapter){
    super(context, "<%- modelName %>", DATABASE_NAME, restAdapter);
  }

  // Creating Tables
  @Override
  public void onCreate(SQLiteDatabase db) {
    <%
    var tableQuery = `CREATE TABLE IF NOT EXISTS ${modelName} ( `;
    var i=0;
    for( let property in model.properties) { -%>
        <% if(model.properties.hasOwnProperty(property)){
            let isArray = model.properties[property].type instanceof Array;
            if(i==0){
                if(property === "id"){
                  tableQuery = `${tableQuery} ${model.methods.createTableTypeQuery(property, model.properties[property].type, isArray)} PRIMARY KEY`;
                }else{
                  tableQuery = `${tableQuery} ${model.methods.createTableTypeQuery(property, model.properties[property].type, isArray)}`;
                }
            }else{
              if(property === "id"){
                tableQuery = `${tableQuery}, ${model.methods.createTableTypeQuery(property, model.properties[property].type, isArray)} PRIMARY KEY`;
              }else{
                tableQuery = `${tableQuery}, ${model.methods.createTableTypeQuery(property, model.properties[property].type, isArray)}`;
              }
            }
        -%>
        <%} -%>
       <% i++; -%>
    <%} -%>
    <% tableQuery = tableQuery + ")"; %>
    String CREATE_<%- modelName %>_TABLE = "<%- tableQuery %>";
    db.execSQL(CREATE_<%- modelName %>_TABLE);
  }

    // Upgrading database
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            // Drop older table if existed
            //db.execSQL("DROP TABLE IF EXISTS <%- modelName %>");
            // Create tables again
            onCreate(db);
    }


    public void insert__db (String id, <%- modelName %> modelData) {
        SQLiteDatabase db = this.getWritableDatabase();
        // Inserting Row
        ContentValues values = getContentValues(modelData);
        db.insert("<%- modelName %>", null, values);
        db.close(); // Closing database connection
    }



    public ContentValues getContentValues(<%- modelName %> modelData){
      ContentValues values = new ContentValues();
         <%
          for( let property in model.properties) { -%>
              <% if(model.properties.hasOwnProperty(property)){
                  let isArray = model.properties[property].type instanceof Array;
                  var capitalPropertyName = model.methods.capitalizeFirstLetter(property);
              -%>

                <% if(isArray){ -%>
                  String <%-property%>Data;
                  if(modelData.get<%-capitalPropertyName%>() != null){
                    <%-property%>Data = new Gson().toJson(modelData.get<%-capitalPropertyName%>(), DataList.class);
                  }
              <% }else{ -%>
                    <% if(model.properties[property].type === "string" || model.properties[property].type === "date"){ -%>
                        String <%-property%>Data = "";
                        if(modelData.get<%-capitalPropertyName%>() != null){
                          <%-property%>Data = modelData.get<%-capitalPropertyName%>().toString();
                        }
                    <% }else if(model.properties[property].type === "object" || model.properties[property].type === "geopoint"){ -%>
                        String <%-property%>Data = "";
                        if(modelData.get<%-capitalPropertyName%>() != null){
                          <%-property%>Data = new Gson().toJson(modelData.get<%-capitalPropertyName%>(), HashMap.class);
                        }
                    <% }else if(model.properties[property].type === "number"){ -%>
                        double <%-property%>Data = 0;
                        if(modelData.get<%-capitalPropertyName%>() != null){
                          <%-property%>Data = (double)modelData.get<%-capitalPropertyName%>();
                        }
                    <% }else if(model.properties[property].type === "boolean"){ -%>
                        int <%-property%>Data = 0;
                        if(modelData.get<%-capitalPropertyName%>()){
                          <%-property%>Data = 1;
                        }else{
                          <%-property%>Data = 0;
                        }
                    <% }else{ -%>
                        //http://stackoverflow.com/questions/160970/how-do-i-invoke-a-java-method-when-given-the-method-name-as-a-string
                        String <%-property%>Data = "";
                        try {
                              Method method = modelData.getClass().getMethod("get<%-capitalPropertyName%>");
                              if(method.invoke(modelData) != null){
                                //<%-property%>Data = modelData.get<%-capitalPropertyName%>().toString();
                                <%-property%>Data = (String) method.invoke(modelData);
                              }
                        } catch (Exception e) {
                          Log.e("Database Error", e.toString());
                        }

                    <% } -%>
              <% }//END IF-ELSE -%>
              values.put("<%-property%>", <%-property%>Data);
          <% } -%>
        <%}%>
        return values;
    }



    // Getting single c
    public   <%- modelName %> get__db(String id) {
        if (id != null) {
            SQLiteDatabase db = this.getReadableDatabase();
            Cursor cursor = db.query("<%- modelName %>", null, "id=?", new String[]{id}, null, null, null, null);
            if (cursor != null) {
                cursor.moveToFirst();
                HashMap<String, Object> hashMap = parseCursor(cursor);

                cursor.close();
                db.close(); // Closing database connection

                if (hashMap != null) {
                    <%- modelName %>Repository repo = restAdapter.createRepository(<%- modelName %>Repository.class);
                    return (<%- modelName %>)repo.createObject(hashMap);
                } else {
                    return null;
                }
            } else {
                return null;
            }
        } else {
            return null;
        }

    } //get__db




    // Getting single cont
    public   <%- modelName %> get__db(String whereKey, String whereKeyValue) {
        if (whereKeyValue != null) {
            SQLiteDatabase db = this.getReadableDatabase();
            Cursor cursor = db.query("<%- modelName %>", null, whereKey + "=?", new String[]{whereKeyValue}, null, null, null, null);
            if (cursor != null) {
                cursor.moveToFirst();
                HashMap<String, Object> hashMap = parseCursor(cursor);

                cursor.close();
                db.close(); // Closing database connection

                if (hashMap != null) {
                    <%- modelName %>Repository repo = restAdapter.createRepository(<%- modelName %>Repository.class);
                    return (<%- modelName %>)repo.createObject(hashMap);
                } else {
                    return null;
                }
            } else {
                return null;
            }
        } else {
            return null;
        }

    } //get__db




    private HashMap<String, Object> parseCursor(Cursor cursor ){
      HashMap<String, Object> hashMap = new HashMap<>();

        <%
          //Increment after each loop
          var id=0;
          for( let property in model.properties) {
        -%>
              <% if(model.properties.hasOwnProperty(property)){
                  let isArray = model.properties[property].type instanceof Array;
                  var capitalPropertyName = model.methods.capitalizeFirstLetter(property);
              -%>

                <% if(isArray){ -%>
                  <%- model.methods.getJavaType(model.properties[property].type[0], isArray) %> <%-property%>Data = new DataList<>();
                  if(cursor.getString(<%- id %>) != null){
                    <%-property%>Data = new Gson().fromJson(cursor.getString(<%- id %>), DataList.class);
                    if(<%-property%>Data != null){
                      <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type[0], isArray) %>)<%-property%>Data;
                      hashMap.put("<%-property%>", <%-property%>Data);
                    }
                  }
              <% }else{ -%>
                    <% if(model.properties[property].type === "string" || model.properties[property].type === "date"){ -%>
                        String <%-property%>Data = "";
                        if(cursor.getString(<%- id %>) != null){
                          <%-property%>Data = cursor.getString(<%- id %>);
                          if(<%-property%>Data != null){
                            <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type, false) %>)<%-property%>Data;
                            hashMap.put("<%-property%>", <%-property%>Data);
                          }
                        }
                    <% }else if(model.properties[property].type === "object" || model.properties[property].type === "geopoint"){ -%>
                        <%- model.methods.getJavaType(model.properties[property].type, false) %> <%-property%>Data = new HashMap<>();
                        if(cursor.getString(<%- id %>) != null){
                          <%-property%>Data = new Gson().fromJson(cursor.getString(<%- id %>), Map.class);
                          if(<%-property%>Data != null){
                            <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type, false) %>)<%-property%>Data;
                            hashMap.put("<%-property%>", <%-property%>Data);
                          }
                        }
                    <% }else if(model.properties[property].type === "number"){ -%>
                        double <%-property%>Data = double(0);
                          <%-property%>Data = cursor.getInt(<%- id %>);
                          <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type, false) %>)<%-property%>Data;
                          hashMap.put("<%-property%>", <%-property%>Data);


                    <% }else if(model.properties[property].type === "boolean"){ -%>
                        boolean <%-property%>Data = false;
                        int temp<%-property%>Data = cursor.getInt(<%- id %>);
                        if( temp<%-property%>Data > 0){
                          <%-property%>Data = true;
                        }else{
                          <%-property%>Data = false;
                        }
                    <% }else{ -%>
                        String <%-property%>Data = "";
                        if(cursor.getString(<%- id %>) != null){
                          <%-property%>Data = cursor.getString(<%- id %>);
                          if(<%-property%>Data != null){
                            <%-property%>Data = <%-property%>Data.toString();
                            hashMap.put("<%-property%>", <%-property%>Data);
                          }
                        }
                    <% } -%>
              <% }//END IF-ELSE -%>
              <% id++; %>
          <% } -%>
        <%}%>
        return hashMap;
    }//parseCursor



    public void upsert__db(String id, <%- modelName %> model){
        if(count__db(id) != 0){
            update__db(id, model);
        }else{
            insert__db(id, model);
        }
    } //upsert__db



    // Getting All Contacts
    public DataList<<%- modelName %>>  getAll__db() {
        DataList<<%- modelName %>> modelList = new DataList<<%- modelName %>>();
        // Select All Query
        String selectQuery = "SELECT  * FROM <%- modelName %>";

        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            do {

                HashMap<String, Object> hashMap = parseCursor(cursor);
                if(hashMap != null){
                    <%- modelName %>Repository repo = restAdapter.createRepository(<%- modelName %>Repository.class);
                    modelList.add((<%- modelName %>)repo.createObject(hashMap));
                }
            } while (cursor.moveToNext());
        }
        cursor.close();
        db.close();
        // return contact list
        return (DataList<<%- modelName %>>) modelList;
    }


    // Getting All Data where
    public DataList<<%- modelName %>>  getAll__db(String whereKey, String whereKeyValue) {
        DataList<<%- modelName %>> modelList = new DataList<<%- modelName %>>();
        // Select All Query
        String selectQuery = "SELECT  * FROM <%- modelName %> WHERE " + whereKey +"='"+ whereKeyValue + "'" ;

        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);

        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            do {

                HashMap<String, Object> hashMap = parseCursor(cursor);
                if(hashMap != null){
                    <%- modelName %>Repository repo = restAdapter.createRepository(<%- modelName %>Repository.class);
                    modelList.add((<%- modelName %>)repo.createObject(hashMap));
                }
            } while (cursor.moveToNext());
        }
        cursor.close();
        db.close();
        // return contact list
        return (DataList<<%- modelName %>>) modelList;
    }


    // Updating single contact
    public int update__db(String id,   <%- modelName %> modelData) {
        SQLiteDatabase db = this.getWritableDatabase();
        ContentValues values = getContentValues(modelData);
        // updating row
        return db.update("<%- modelName %>", values, "id = ?",
                new String[] { id });
    }

}
