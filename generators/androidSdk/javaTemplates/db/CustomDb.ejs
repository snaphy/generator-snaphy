package com.androidsdk.snaphy.snaphyandroidsdk.db;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;

import com.androidsdk.snaphy.snaphyandroidsdk.models.Chat;
//Import self repository..
import com.androidsdk.snaphy.snaphyandroidsdk.repository.<%- modelName %>Repository;
//Import Model
import com.androidsdk.snaphy.snaphyandroidsdk.repository.<%- modelName %>;
import com.strongloop.android.loopback.RestAdapter;

/**
* Created by snaphy on 1/2/2017.
*/

<%
 /*-------PURE JAVASCRIPT METHODS-------------------*/
 var modelName = model.methods.capitalizeFirstLetter(model.name);
%>

public class <%- modelName %>Db extends DbHandler<<%- modelName %>, <%- modelName %>Repository> {
  public ChatDb(Context context, RestAdapter restAdapter){
    super(context, "<%- modelName %>", restAdapter);
  }

  // Creating Tables
  @Override
  public void onCreate(SQLiteDatabase db) {
    <%
    var tableQuery = `CREATE TABLE  ${modelName} IF NOT EXISTS ( id TEXT PRIMARY KEY`;
    for( let property in model.properties) { -%>
        <% if(model.properties.hasOwnProperty(property)){
            let isArray = model.properties[property].type instanceof Array;
            tableQuery = `${tableQuery}, ${model.methods.createTableTypeQuery(property, model.properties[property].type, isArray)}`;
        -%>
        <%} -%>
    <%} -%>
    <% tableQuery = tableQuery + ")"; %>
    String CREATE_<%- modelName %>_TABLE = "<%- tableQuery %>";
    db.execSQL(CREATE_<%- modelName %>_TABLE);
  }

    // Upgrading database
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            // Drop older table if existed
            db.execSQL("DROP TABLE IF EXISTS <%- modelName %>");
            // Create tables again
            onCreate(db);
    }


    public void insert__db (String id, <%- modelName %> model) {
        SQLiteDatabase db = this.getWritableDatabase();
        // Inserting Row
        ContentValues values = new ContentValues();
         <%
          for( let property in model.properties) { -%>
              <% if(model.properties.hasOwnProperty(property)){
                  let isArray = model.properties[property].type instanceof Array;
                  var capitalPropertyName = model.methods.capitalizeFirstLetter(property);
              -%>

                <% if(isArray){ -%>
                  String <%-property%>Data;
                  if(model.get<%-capitalPropertyName%>() != null){
                    <%-property%>Data = new Gson().toJson(model.get<%-capitalPropertyName%>(), DataList.class);
                  }
              <% }else{ -%>
                    <% if(model.properties[property].type === "string" || model.properties[property].type === "date"){ -%>
                        String <%-property%>Data;
                        if(model.get<%-capitalPropertyName%>() != null){
                          <%-property%>Data = model.get<%-capitalPropertyName%>().toString();
                        }
                    <% }else if(model.properties[property].type === "object" || model.properties[property].type === "geopoint"){ -%>
                        String <%-property%>Data;
                        if(model.get<%-capitalPropertyName%>() != null){
                          <%-property%>Data = new Gson().toJson(model.get<%-capitalPropertyName%>(), HashMap.class);
                        }
                    <% }else if(model.properties[property].type === "number"){ -%>
                        double <%-property%>Data;
                        if(model.get<%-capitalPropertyName%>() != null){
                          <%-property%>Data = (double)model.get<%-capitalPropertyName%>();
                        }
                    <% }else if(model.properties[property].type === "boolean"){ -%>
                        int <%-property%>Data;
                        if(model.get<%-capitalPropertyName%>()){
                          <%-property%>Data = 1;
                        }else{
                          <%-property%>Data = 0;
                        }
                    <% }else{ -%>
                        String <%-property%>Data;
                        if(model.get<%-capitalPropertyName%>() != null){
                          <%-property%>Data = model.get<%-capitalPropertyName%>().toString();
                        }
                    <% } -%>
              <% }//END IF-ELSE -%>
              values.put("<%-property%>", <%-property%>Data);
          <% } -%>
        <%}%>
        db.insert(TABLE, null, values);
        db.close(); // Closing database connection
    }


    // Getting single cont
    public   <%- modelName %> get__db(String id) {
        if (id != null) {
            SQLiteDatabase db = this.getReadableDatabase();
            Cursor cursor = db.query("<%- modelName %>", null, "id=?", new String[]{id}, null, null, null, null);
            if (cursor != null) {
                cursor.moveToFirst();
                HashMap<String, Object> chatHashMap = new HashMap<>();

                <%
                  var i=0;
                  for( let property in model.properties) { 
                -%>
                      <% if(model.properties.hasOwnProperty(property)){
                          let isArray = model.properties[property].type instanceof Array;
                          var capitalPropertyName = model.methods.capitalizeFirstLetter(property);
                      -%>

                        <% if(isArray){ -%>
                          <%- model.methods.getJavaType(model.properties[property].type[0], isArray) > <%-property%>Data = new DataList<>();
                          if(cursor.getString(<%- id %>) != null){
                            <%-property%>Data = new Gson().fromJson(cursor.getString(<%- id %>), DataList.class);
                            if(<%-property%>Data != null){
                              <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type[0], isArray) >)<%-property%>Data;
                              chatHashMap.put("<%-property%>", <%-property%>Data);
                            }
                          }
                      <% }else{ -%>
                            <% if(model.properties[property].type === "string" || model.properties[property].type === "date"){ -%>
                                String <%-property%>Data;
                                if(cursor.getString(<%- id %>) != null){
                                  <%-property%>Data = cursor.getString(<%- id %>);
                                  if(<%-property%>Data != null){
                                    <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type, false) >)<%-property%>Data;
                                    chatHashMap.put("<%-property%>", <%-property%>Data);
                                  }
                                }
                            <% }else if(model.properties[property].type === "object" || model.properties[property].type === "geopoint"){ -%>
                                <%- model.methods.getJavaType(model.properties[property].type, false) > <%-property%>Data = new Map<>();
                                if(cursor.getString(<%- id %>) != null){
                                  <%-property%>Data = cursor.getString(<%- id %>);
                                  if(<%-property%>Data != null){
                                    <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type, false) >)<%-property%>Data;
                                    chatHashMap.put("<%-property%>", <%-property%>Data);
                                  }
                                }
                            <% }else if(model.properties[property].type === "number"){ -%>
                                double <%-property%>Data;  
                                  <%-property%>Data = cursor.getInt(<%- id %>);
                                  <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type, false) >)<%-property%>Data;
                                  chatHashMap.put("<%-property%>", <%-property%>Data);
                              
                              
                            <% }else if(model.properties[property].type === "boolean"){ -%>
                                boolean <%-property%>Data;
                                int temp<%-property%>Data = cursor.getInt(<%- id %>);
                                if( temp<%-property%>Data > 0){
                                  <%-property%>Data = true;
                                }else{
                                  <%-property%>Data = false;
                                }
                            <% }else{ -%>
                                String <%-property%>Data;
                                if(cursor.getString(<%- id %>) != null){
                                  <%-property%>Data = cursor.getString(<%- id %>);
                                  if(<%-property%>Data != null){
                                    <%-property%>Data = (<%- model.methods.getJavaType(model.properties[property].type, false) >)<%-property%>Data;
                                    chatHashMap.put("<%-property%>", <%-property%>Data);
                                  }
                                }
                            <% } -%>
                      <% }//END IF-ELSE -%>
                      <% i++; %>
                  <% } -%>
                <%}%>  

                String idData = cursor.getString(0);
                if(idData != null){
                    chatHashMap.put("id", idData);
                }
                
                String object = cursor.getString(1);
                cursor.close();
                db.close(); // Closing database connection
                if (object != null) {
                    HashMap<String, Object> chatHashMap = toHashMap(object);
                    if (chatHashMap != null) {
                        R repo = restAdapter.createRepository(type);
                        return (M)repo.createObject(chatHashMap);
                    } else {
                        return null;
                    }
                } else {
                    return null;
                }

            } else {
                return null;
            }
        } else {
            return null;
        }

    }




}
