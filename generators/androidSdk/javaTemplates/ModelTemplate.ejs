package com.androidsdk.snaphy.snaphyandroidsdk.models;

<%
    function capitalizeFirstLetter(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
    }

    function lowercaseFirstLetter(string) {
        return string.charAt(0).toLowerCase() + string.slice(1);
    }

    //convert javascript to java type
    function convertType(type){
        if(type === "string" || type === "any"){
            return "String";
        }
        else if (type === "number") {
            return "Double";
        }
        else if (type === "object") {
            return "HashMap<String, Object>"
        }
        else if (type === "boolean") {
            return "Boolean"
        }
        else {
            return capitalizeFirstLetter(type);
        }
    }

    //isInternalArgument function function for finding if an argument is internal or not..
    function  isInternalArgument(argumentObj, argumentName, method){
        var argumentSource = argumentObj.http.source;
        var internalArgument = false;
        //Now check if the argument is the internal argument..
        if(argumentSource === "path"){
            //Now check if the argument does not belongs to related mode data..
            if(method.hasResourceParams){
                var argumentFound = false;
                for(var i=0; i< method.resourceParams.length; i++){
                    var resourceArgObj = method.resourceParams[i];
                    if(resourceArgObj.arg === argumentName){
                        argumentFound = true;
                        break;
                    }
                } //forloop ends
                if(argumentFound){
                    internalArgument = false;
                }else{
                    internalArgument = true;
                }
            }else{
                //Argument is internal argument..
                internalArgument = true;
            }
        } //if path
        return internalArgument;
    }

    var modelName = capitalizeFirstLetter(model.name);
%>

<% if(model.base === "User"){ %>
import com.strongloop.android.loopback.User;
<% } else { %>
import com.strongloop.android.loopback.Model;
<% } %>

import com.strongloop.android.loopback.Model;
import com.strongloop.android.loopback.RestAdapter;
import com.strongloop.android.loopback.callbacks.ListCallback;
import com.strongloop.android.loopback.callbacks.ObjectCallback;
import com.strongloop.android.loopback.callbacks.VoidCallback;

//Now import repository of related models..
<% for(relation in model.relations) { %>
    <% if(model.relations.hasOwnProperty(relation)) {
        var relatedModelName = model.relations[relation].model;
        var repoName = capitalizeFirstLetter(relatedModelName) + "Repository";
    %>
        import com.androidsdk.snaphy.snaphyandroidsdk.repository.<%- repoName %>;

    <% } %>
<% } %>

import java.util.ArrayList;
import java.util.HashMap;


<% if(model.base === "User"){ %>
public class <%- modelName %> extends User {
<% } else { %>
public class <%- modelName %> extends Model {
<% } %>

    private <%- modelName %> that ;

    public <%- modelName %> (){
        that = this;
    }

    <% for( var property in model.properties) { %>
        <% if(model.properties.hasOwnProperty(property)){
            var capitalPropertyName = capitalizeFirstLetter(property);
            var isArray = model.properties[property].type instanceof Array;
        %>
            <% if(isArray) {
                var typeName = model.properties[property].type[0];
                var listType;
                if(typeName === "object"){
                    listType = "ArrayList<HashMap<String, Object>>";
                }
                else if (typeName === "string" || typeName === "date") {
                    listType = "ArrayList<String>";
                }
                else if (typeName === "number") {
                    listType = "ArrayList<Double>";
                }
                else if(true){
                    listType = "ArrayList<Object>";
                }
            %>

                private <%- listType %> <%- property %>;
                /* Adding Getter and Setter methods */
                public <%- listType %> get<%- capitalPropertyName %>(){
                    return <%- property %>;
                }

                /* Adding Getter and Setter methods */
                public void set<%- capitalPropertyName %>(<%- listType %> <%- property %>){
                    this.<%- property %> = <%- property %>;
                }

            <% } %>
            <% if( (model.properties[property].type === "string" || model.properties[property].type === "date") && property !== "id") { %>
                private String <%- property %>;
                /* Adding Getter and Setter methods */
                public String get<%- capitalPropertyName %>(){
                    return <%- property %>;
                }

                /* Adding Getter and Setter methods */
                public void set<%- capitalPropertyName %>(String <%- property %>){
                    this.<%- property %> = <%- property %>;
                }

            <% } %>
            <% if( (model.properties[property].type === "number" )&& property !== "id") { %>
                private Double <%- property %>;
                /* Adding Getter and Setter methods */
                public Double get<%- capitalPropertyName %>(){
                    return <%- property %>;
                }

                /* Adding Getter and Setter methods */
                public void set<%- capitalPropertyName %>(Double <%- property %>){
                    this.<%- property %> = <%- property %>;
                }

            <% } %>
            <% if( model.properties[property].type === "object" && property !== "id") { %>
                private HashMap<String, Object> <%- property %>;
                /* Adding Getter and Setter methods */
                public HashMap<String, Object> get<%- capitalPropertyName %>(){
                    return <%- property %>;
                }

                /* Adding Getter and Setter methods */
                public void set<%- capitalPropertyName %>(HashMap<String, Object> <%- property %>){
                    this.<%- property %> = <%- property %>;
                }

            <% } %>

        <% } %>
    <% } %>


    <%# //Adding a BELONGS TO RELATIONSHIP EXAMPLE
    private Customer customer ;

    public Customer getCustomer() {
        return customer;
    }

    public void setCustomer(Customer customer) {
        this.customer = customer;
    }



    public void setCustomer(HashMap<String, Object> customer) {
        //First create a dummy Repo class object for customer.
        CustomerRepository customerRepository = new CustomerRepository();
        Customer customer1 = customerRepository.createObject(customer);
        setCustomer(customer1);
    }


    public void addRelation(Customer customer) {
        this.setCustomer(customer);
    }%>



    //Now adding relations between related models
    <% for(relation in model.relations) { %>
        <% if(model.relations.hasOwnProperty(relation)) {
            var lowercaseRelatedModelName = lowercaseFirstLetter( model.relations[relation].model );
            var capitalcaseRelatedModelName = capitalizeFirstLetter(model.relations[relation].model);
        %>
            <% if(model.relations[relation].type === "belongsTo" || model.relations[relation].type === "hasOne"){ %>
                //Define belongsTo relation method here..
                private <%- capitalcaseRelatedModelName %>  <%- lowercaseRelatedModelName %> ;

                public <%- capitalcaseRelatedModelName %> get<%- capitalcaseRelatedModelName %>() {
                    return <%- lowercaseRelatedModelName %>;
                }

                public void set<%- capitalcaseRelatedModelName %>(<%- capitalcaseRelatedModelName %> <%- lowercaseRelatedModelName %>) {
                    this.<%- lowercaseRelatedModelName %> = <%- lowercaseRelatedModelName %>;
                }

                //Adding related model automatically in case of include statement from server..
                public void set<%- capitalcaseRelatedModelName %>(HashMap<String, Object> <%- lowercaseRelatedModelName %>) {
                    //First create a dummy Repo class object for customer.
                    <%- capitalcaseRelatedModelName %>Repository <%- lowercaseRelatedModelName %>Repository = new <%- capitalcaseRelatedModelName %>Repository();
                    <%- capitalcaseRelatedModelName %> <%- lowercaseRelatedModelName %>1 = <%- lowercaseRelatedModelName %>Repository.createObject(<%- lowercaseRelatedModelName %>);
                    set<%- capitalcaseRelatedModelName %>(<%- lowercaseRelatedModelName %>1);
                }

                //Adding relation method..
                public void addRelation(<%- capitalcaseRelatedModelName %> <%- lowercaseRelatedModelName %>) {
                    this.setCustomer(<%- lowercaseRelatedModelName %>);
                }


                //Now add instance methods to fetch the related belongsTo Model..
                <%#
                    1) Find the searched model definition first..
                    2) Find the method obj.
                    2) Find the relation name from the model relation obj.
                    //Now start adding server fetching data relations..
                        /*{
                            "fullName": "Recipe.prototype.__get__customer",
                            "name": "prototype.__get__customer",
                            "accepts": [{
                                "arg": "id",
                                "type": "any",
                                "required": true,
                                "http": {
                                    "source": "path"
                                },
                                "description": "PersistedModel id"
                            }, {
                                "arg": "refresh",
                                "type": "boolean",
                                "http": {
                                    "source": "query"
                                }
                            }],
                            "returns": [{
                                "arg": "customer",
                                "type": "Customer",
                                "root": true
                            }],
                            "errors": [],
                            "description": "Fetches belongsTo relation customer.",
                            "documented": true,
                            "routes": [{
                                "path": "/:id/customer",
                                "verb": "get"
                            }],
                            "internal": "Use Recipe.customer() instead."
                        }*/
                %>

                <%
                    var modelDef  = model.restDefinition[modelName];
                        //console.log(model.restDefinition);
                    if(modelDef){
                        var restMethods = model.restDefinition[modelName].methods;
                        var modelRelationName = relation;
                        //Now run a loop and find the prototype model definition with same name..
                        restMethods.forEach(function(method){
                            //Str is like prototype.__get__priorities
                            //match prototype.__get__
                            var patt = /prototype\.\_\_[a-zA-Z]+\_\_/;
                            //match prototype.__get__priorities
                            var patt1 = /prototype\.\_\_[a-zA-Z]+\_\_.+/;
                            //match prototype.__
                            var methodPatt = /prototype\.\_\_/;

                            if(patt1.test(method.name)){
                                //Now get the new str.
                                var searchRelationName = method.name.replace(patt, "");
                                if(searchRelationName === modelRelationName){
                                    var methodName = method.name.replace(methodPatt, "");
                                    var methodString = "public void " + methodName + "(";
                                    //Now run a loop of arguments..
                                    method.accepts.forEach(function(argumentObj, index){
                                        var argumentName   = argumentObj.arg;
                                        var argumentType   = argumentObj.type;
                                        if(argumentType === "any"){
                                            argumentType = "string";
                                        }

                                        var argumentSource = argumentObj.http.source;
                                        //Checking if the argument is internal or not..
                                        var internalArgument = isInternalArgument(argumentObj, argumentName, method);


                                        if(!internalArgument ){
                                            if(argumentType  instanceof Array){
                                                argumentType = "ArrayList<" + convertType(argumentType[0]) + ">" ;
                                            }
                                            else {
                                                argumentType = convertType(argumentType);
                                            }

                                            methodString = methodString + " " +argumentType + " " + argumentName +", ";
                                        }
                                    });//arguments loop ends..
                                    var callback ;
                                    var returnType;
                                    var callbackType;
                                    var type;
                                    if(method.returns.length){
                                        if(method.returns[0].type instanceof Array){
                                            type = convertType(method.returns[0].type[0]);
                                            returnType = "ArrayList<" + type + ">";
                                            methodString = methodString + " " + "RestAdapter restAdapter" + ", " +  "final ListCallback<" + type + "> callback)";
                                            callback = "ListCallback<" + type + "> ";
                                            callbackType = "ListCallback";
                                        }else{
                                            type = convertType(method.returns[0].type);
                                            returnType = type;
                                            methodString = methodString + " " + "RestAdapter restAdapter" + ", " +  "final ObjectCallback<" + type + "> callback)";
                                            callback = "ObjectCallback<" + type + "> ";
                                            callbackType = "ObjectCallback";
                                        }
                                    }else{
                                        methodString = methodString + " " + "RestAdapter restAdapter" + ", " +  "final VoidCallback callback)";
                                        callback = "VoidCallback ";
                                        //returnType = type;
                                        callbackType = "VoidCallback";
                                    }

                %>

                //Write the method here..
                <%- methodString %> {
                    //Define methods here..
                    final <%- modelName %>Repository  <%- lowercaseFirstLetter(modelName) %>Repo = restAdapter.createRepository(<%- modelName %>Repository.class);
                    <%#
                        recipeRepo.get__customer(id, new ObjectCallback<Customer>() {
                            @Override
                            public void onSuccess(Customer object) {
                                //now add relation to this recipe.
                                addRelation(object);
                                callback.onSuccess(object);
                            }

                            @Override
                            public void onError(Throwable t) {
                                //Now calling the callback
                                callback.onError(t);
                            }

                        });
                    %>


                    <%#
                        1)Now fetch the argumments list. The argument that is internal add "ObjectValue.argument" and for other simply add argument.
                    %>

                    <%
                        var methodArguments = "";
                        //Now run a loop of arguments..
                        method.accepts.forEach(function(argumentObj, index){
                            var argumentName   = argumentObj.arg;
                            var argumentType   = argumentObj.type;
                            if(argumentType === "any"){
                                argumentType = "string";
                            }

                            var argumentSource = argumentObj.http.source;
                            //Checking if the argument is internal or not..
                            var internalArgument = isInternalArgument(argumentObj, argumentName, method);


                            if(!internalArgument ){
                                if(argumentType  instanceof Array){
                                    argumentType = "ArrayList<" + convertType(argumentType[0]) + ">" ;
                                }
                                else {
                                    argumentType = convertType(argumentType);
                                }

                                methodArguments = methodArguments + argumentName + ", ";
                            }else{
                                //Add internal arguments here..
                                methodArguments = methodArguments + "that." +  argumentName + ", ";
                            }
                        });//arguments loop ends..


                    %>

                    <%- lowercaseFirstLetter(modelName) %>Repo.<%- methodName %>(<%- methodArguments %> new <%- callback %>(){
                        <% if(callbackType === "VoidCallback"){ %>
                            @Override
                            public void onSuccess() {
                                callback.onSuccess();
                            }
                        <% } %>

                        <% if(callbackType === "ObjectCallback"){ %>
                            @Override
                            public void onSuccess(<%- returnType %> object) {
                                //now add relation to this recipe.
                                addRelation(object);
                                //Also add relation to child type for two way communication..
                                object.addRelation(that);
                                callback.onSuccess(object);
                            }
                        <% } %>


                        <% if(callbackType === "ListCallback"){ %>
                            @Override
                            public void onSuccess(<%- returnType %> object) {
                                //now add relation to this recipe.
                                addRelation(object);
                                for (<%- type %> obj : object) {
                                    //Also add relation to child type for two way communication..
                                    obj.addRelation(that);
                                }

                                callback.onSuccess(object);
                            }
                        <% } %>

                        @Override
                        public void onError(Throwable t) {
                            //Now calling the callback
                            callback.onError(t);
                        }

                    });
                } //method def ends here.


                            <% } %>
                        <% } %>
                    <% }); %>
                <% } %>

            <% } %>
            <% if(model.relations[relation].type === "hasMany" || model.relations[relation].type === "hasManyThrough") { %>
                //Define hasMany, hasManyThrough method here..

            <% } %>
            <% if(model.relations[relation].type === "hasAndBelongsToMany") { %>
                //Define hasAndBelongsToMany..

            <% } %>
        <% } %>
    <% } %>

}
